teleop_node:
  ros__parameters:
    
    turn_calc_w: 0.75
    turn_calc_l: 0.75
    #The teleop node must find axis_linear and axis_angular
    #Other axis are optional
    axis_map: [
                "axis_vx: 1", # L STICK X
                "axis_vy: 0", # L STICK X
                "axis_wz: 2", # R STICK Y #3
                "axis_turn_left: 4", # LT
                "axis_turn_right: 5" # RT
    ]

    # The teleop node will work without buttons.
    #
    button_map: [
                  # increase and decrease gain
                  "button_less_gain: 6", # LB
                  "button_more_gain: 7", # RB
                  
                  # function button
                  "button_function: 11", # START

                  # the teleop lock will publish true on the teleop lock topic
                  # [button_function + button_teleop_lock] to unlock
                  "button_teleop_lock: 13", # BACK

                  # Switch drive mode
                  "button_left: 21", # LEFT buttonified axis
                  "button_forward: 22", # UP buttonified axis

                  # Other buttons
                  "button_0: 0", # A
                  "button_1: 1", # B
                  "button_2: 3", # X
                  "button_3: 4", # Y
                  "button_4: 2", # XBOX does not exist
                  "button_5: 13", # L STICK
                  "button_6: 14", # R STICK
                  #button_7: 12, # RIGHT
                  #button_8: 14 # DOWN
    ]


    # Button that must be pressed when turning in place
    button_turning_safety: button_3


    # Button combination for homing
    # Buttons must be pressed at the same time
    home_buttons: [button_0, button_3]


    # Button combination for cahnging to omni mode
    # Buttons must be pressed at the same time
    omni_buttons: [button_1, button_2]

    kv_default_buttons: [button_less_gain, button_more_gain]

    mode_left_buttons: [button_function, button_left]
    mode_forward_buttons: [button_function, button_forward]


    # The teleop node can call an arb. number of user-specified (std_srv::Trigger) services
    # button_function + <user_spec_button>
    # This will only work if button_function is defined
    # empety service names are ignored
    trigger_map: ["button_0:release_esd_lock",
                  "button_1:void",
                  "button_2:relative/path/to/service",
                  "button_3:/absolute/path/to/service",
                  "button_4:void",
                  "button_5:void",
                  "button_6:void"
    ]

    gains:        [
                  "kv_default: 0.75", 
                  "kv_min: 0.1",
                  "kv_max: 1.5",
                  "kv_increment: 0.1"
    ]
    # other
    # axis_1: 0, # L STICK Y
    # axis_2: 4, # R STICK X
    # axis_3: 6, # LEFT-RIGHT
    # axis_4: 7 # UP-DOWN
